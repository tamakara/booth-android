<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/tamakara/booth/ui/screens/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/tamakara/booth/ui/screens/LoginScreen.kt" />
              <option name="originalContent" value="package com.tamakara.booth.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.tamakara.booth.data.local.PreferencesManager&#10;import com.tamakara.booth.ui.viewmodel.AuthViewModel&#10;import com.tamakara.booth.ui.viewmodel.LoginState&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LoginScreen(&#10;    navController: NavController,&#10;    viewModel: AuthViewModel = viewModel()&#10;) {&#10;    val context = LocalContext.current&#10;    val prefsManager = remember { PreferencesManager(context) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    var phone by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var isRegisterMode by remember { mutableStateOf(false) }&#10;&#10;    val loginState by viewModel.loginState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    LaunchedEffect(loginState) {&#10;        when (val state = loginState) {&#10;            is LoginState.Success -&gt; {&#10;                val userId = state.userId.toLongOrNull() ?: -1L&#10;                prefsManager.saveUserInfo(userId, state.userId, phone)&#10;                snackbarHostState.showSnackbar(if (isRegisterMode) &quot;注册成功&quot; else &quot;登录成功&quot;)&#10;                navController.popBackStack()&#10;            }&#10;&#10;            is LoginState.Error -&gt; {&#10;                snackbarHostState.showSnackbar(state.message)&#10;            }&#10;&#10;            else -&gt; {}&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(if (isRegisterMode) &quot;注册&quot; else &quot;登录&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;返回&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(snackbarHostState) }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = &quot;欢迎来到 Booth&quot;,&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            OutlinedTextField(&#10;                value = phone,&#10;                onValueChange = { phone = it },&#10;                label = { Text(&quot;手机号&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),&#10;                singleLine = true&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = { Text(&quot;密码&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                singleLine = true&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    if (phone.isNotBlank() &amp;&amp; password.isNotBlank()) {&#10;                        if (isRegisterMode) {&#10;                            viewModel.register(phone, password)&#10;                        } else {&#10;                            viewModel.login(phone, password)&#10;                        }&#10;                    } else {&#10;                        scope.launch {&#10;                            snackbarHostState.showSnackbar(&quot;请填写完整信息&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = loginState !is LoginState.Loading&#10;            ) {&#10;                if (loginState is LoginState.Loading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(24.dp),&#10;                        color = MaterialTheme.colorScheme.onPrimary&#10;                    )&#10;                } else {&#10;                    Text(if (isRegisterMode) &quot;注册&quot; else &quot;登录&quot;)&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            TextButton(onClick = { isRegisterMode = !isRegisterMode }) {&#10;                Text(if (isRegisterMode) &quot;已有账号？去登录&quot; else &quot;还没有账号？去注册&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.tamakara.booth.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.tamakara.booth.data.local.PreferencesManager&#10;import com.tamakara.booth.ui.viewmodel.AuthViewModel&#10;import com.tamakara.booth.ui.viewmodel.LoginState&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LoginScreen(&#10;    navController: NavController,&#10;    viewModel: AuthViewModel = viewModel()&#10;) {&#10;    val context = LocalContext.current&#10;    val prefsManager = remember { PreferencesManager(context) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    var phone by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var isRegisterMode by remember { mutableStateOf(false) }&#10;&#10;    val loginState by viewModel.loginState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    LaunchedEffect(loginState) {&#10;        when (val state = loginState) {&#10;            is LoginState.Success -&gt; {&#10;                if (isRegisterMode) {&#10;                    snackbarHostState.showSnackbar(&quot;注册成功&quot;)&#10;                    navController.popBackStack()&#10;                } else {&#10;                    // 暂时没有服务端返回的 userId，可在后续通过接口获取再更新&#10;                    prefsManager.saveUserInfo(-1L, state.token, phone)&#10;                    snackbarHostState.showSnackbar(&quot;登录成功&quot;)&#10;                    navController.popBackStack()&#10;                }&#10;            }&#10;&#10;            is LoginState.Error -&gt; {&#10;                snackbarHostState.showSnackbar(state.message)&#10;            }&#10;&#10;            else -&gt; {}&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(if (isRegisterMode) &quot;注册&quot; else &quot;登录&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;返回&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(snackbarHostState) }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = &quot;欢迎来到 Booth&quot;,&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            OutlinedTextField(&#10;                value = phone,&#10;                onValueChange = { phone = it },&#10;                label = { Text(&quot;手机号&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),&#10;                singleLine = true&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = { Text(&quot;密码&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                singleLine = true&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    if (phone.isNotBlank() &amp;&amp; password.isNotBlank()) {&#10;                        if (isRegisterMode) {&#10;                            viewModel.register(phone, password)&#10;                        } else {&#10;                            viewModel.login(phone, password)&#10;                        }&#10;                    } else {&#10;                        scope.launch {&#10;                            snackbarHostState.showSnackbar(&quot;请填写完整信息&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = loginState !is LoginState.Loading&#10;            ) {&#10;                if (loginState is LoginState.Loading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(24.dp),&#10;                        color = MaterialTheme.colorScheme.onPrimary&#10;                    )&#10;                } else {&#10;                    Text(if (isRegisterMode) &quot;注册&quot; else &quot;登录&quot;)&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            TextButton(onClick = { isRegisterMode = !isRegisterMode }) {&#10;                Text(if (isRegisterMode) &quot;已有账号？去登录&quot; else &quot;还没有账号？去注册&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
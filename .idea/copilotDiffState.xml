<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/tamakara/booth/ui/screens/LoginScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/tamakara/booth/ui/screens/LoginScreen.kt" />
              <option name="originalContent" value="package com.tamakara.booth.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.CircularProgressIndicator&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.IconButton&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedTextField&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TextButton&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.NavController&#10;import com.tamakara.booth.ui.viewmodel.AuthViewModel&#10;import com.tamakara.booth.ui.viewmodel.LoginState&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LoginScreen(&#10;    navController: NavController,&#10;    viewModel: AuthViewModel = viewModel()&#10;) {&#10;    val context = LocalContext.current&#10;    val scope = rememberCoroutineScope()&#10;&#10;    var phone by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    var isRegisterMode by remember { mutableStateOf(false) }&#10;&#10;    val loginState by viewModel.loginState.collectAsState()&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    LaunchedEffect(loginState) {&#10;        when (val state = loginState) {&#10;            is LoginState.Success -&gt; {&#10;                // 登录成功或注册成功后的统一处理：提示并返回&#10;                snackbarHostState.showSnackbar(if (isRegisterMode) &quot;注册成功&quot; else &quot;登录成功&quot;)&#10;                navController.popBackStack()&#10;            }&#10;            is LoginState.Error -&gt; {&#10;                snackbarHostState.showSnackbar(state.message)&#10;            }&#10;&#10;            else -&gt; {}&#10;        }&#10;    }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(if (isRegisterMode) &quot;注册&quot; else &quot;登录&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;返回&quot;)&#10;                    }&#10;                }&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(snackbarHostState) }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center&#10;        ) {&#10;            Text(&#10;                text = &quot;欢迎来到 Booth&quot;,&#10;                style = MaterialTheme.typography.headlineMedium&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            OutlinedTextField(&#10;                value = phone,&#10;                onValueChange = { phone = it },&#10;                label = { Text(&quot;手机号&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),&#10;                singleLine = true&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            OutlinedTextField(&#10;                value = password,&#10;                onValueChange = { password = it },&#10;                label = { Text(&quot;密码&quot;) },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                visualTransformation = PasswordVisualTransformation(),&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#10;                singleLine = true&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            Button(&#10;                onClick = {&#10;                    if (phone.isNotBlank() &amp;&amp; password.isNotBlank()) {&#10;                        if (isRegisterMode) {&#10;                            viewModel.register(phone, password)&#10;                        } else {&#10;                            viewModel.login(phone, password)&#10;                        }&#10;                    } else {&#10;                        scope.launch {&#10;                            snackbarHostState.showSnackbar(&quot;请填写完整信息&quot;)&#10;                        }&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth(),&#10;                enabled = loginState !is LoginState.Loading&#10;            ) {&#10;                if (loginState is LoginState.Loading) {&#10;                    CircularProgressIndicator(&#10;                        modifier = Modifier.size(24.dp),&#10;                        color = MaterialTheme.colorScheme.onPrimary&#10;                    )&#10;                } else {&#10;                    Text(if (isRegisterMode) &quot;注册&quot; else &quot;登录&quot;)&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            TextButton(onClick = { isRegisterMode = !isRegisterMode }) {&#10;                Text(if (isRegisterMode) &quot;已有账号？去登录&quot; else &quot;还没有账号？去注册&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.tamakara.booth.ui.screens&#13;&#10;&#13;&#10;import androidx.compose.foundation.layout.Arrangement&#13;&#10;import androidx.compose.foundation.layout.Column&#13;&#10;import androidx.compose.foundation.layout.Spacer&#13;&#10;import androidx.compose.foundation.layout.fillMaxSize&#13;&#10;import androidx.compose.foundation.layout.fillMaxWidth&#13;&#10;import androidx.compose.foundation.layout.height&#13;&#10;import androidx.compose.foundation.layout.padding&#13;&#10;import androidx.compose.foundation.layout.size&#13;&#10;import androidx.compose.foundation.text.KeyboardOptions&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#13;&#10;import androidx.compose.material3.Button&#13;&#10;import androidx.compose.material3.CircularProgressIndicator&#13;&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#13;&#10;import androidx.compose.material3.Icon&#13;&#10;import androidx.compose.material3.IconButton&#13;&#10;import androidx.compose.material3.MaterialTheme&#13;&#10;import androidx.compose.material3.OutlinedTextField&#13;&#10;import androidx.compose.material3.Scaffold&#13;&#10;import androidx.compose.material3.SnackbarHost&#13;&#10;import androidx.compose.material3.SnackbarHostState&#13;&#10;import androidx.compose.material3.Text&#13;&#10;import androidx.compose.material3.TextButton&#13;&#10;import androidx.compose.material3.TopAppBar&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.runtime.LaunchedEffect&#13;&#10;import androidx.compose.runtime.collectAsState&#13;&#10;import androidx.compose.runtime.getValue&#13;&#10;import androidx.compose.runtime.mutableStateOf&#13;&#10;import androidx.compose.runtime.remember&#13;&#10;import androidx.compose.runtime.rememberCoroutineScope&#13;&#10;import androidx.compose.runtime.setValue&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.text.input.KeyboardType&#13;&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#13;&#10;import androidx.navigation.NavController&#13;&#10;import com.tamakara.booth.ui.viewmodel.AuthViewModel&#13;&#10;import com.tamakara.booth.ui.viewmodel.LoginState&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;&#13;&#10;@OptIn(ExperimentalMaterial3Api::class)&#13;&#10;@Composable&#13;&#10;fun LoginScreen(&#13;&#10;    navController: NavController,&#13;&#10;    viewModel: AuthViewModel = viewModel()&#13;&#10;) {&#13;&#10;    val scope = rememberCoroutineScope()&#13;&#10;&#13;&#10;    var phone by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#13;&#10;    var isRegisterMode by remember { mutableStateOf(false) }&#13;&#10;&#13;&#10;    val loginState by viewModel.loginState.collectAsState()&#13;&#10;    val snackbarHostState = remember { SnackbarHostState() }&#13;&#10;&#13;&#10;    LaunchedEffect(loginState) {&#13;&#10;        when (val state = loginState) {&#13;&#10;            is LoginState.Success -&gt; {&#13;&#10;                // 通过 SavedStateHandle 通知上一个页面登录成功，然后立刻返回&#13;&#10;                navController.previousBackStackEntry?.savedStateHandle?.set(&quot;login_result&quot;, true)&#13;&#10;                // 可选：传递提示文案&#13;&#10;                navController.previousBackStackEntry?.savedStateHandle?.set(&#13;&#10;                    &quot;login_message&quot;,&#13;&#10;                    if (isRegisterMode) &quot;注册成功&quot; else &quot;登录成功&quot;&#13;&#10;                )&#13;&#10;                navController.popBackStack()&#13;&#10;            }&#13;&#10;            is LoginState.Error -&gt; {&#13;&#10;                // 仅错误时在本页提示&#13;&#10;                snackbarHostState.showSnackbar(state.message)&#13;&#10;            }&#13;&#10;&#13;&#10;            else -&gt; {}&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    Scaffold(&#13;&#10;        topBar = {&#13;&#10;            TopAppBar(&#13;&#10;                title = { Text(if (isRegisterMode) &quot;注册&quot; else &quot;登录&quot;) },&#13;&#10;                navigationIcon = {&#13;&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#13;&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;返回&quot;)&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            )&#13;&#10;        },&#13;&#10;        snackbarHost = { SnackbarHost(snackbarHostState) }&#13;&#10;    ) { paddingValues -&gt;&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxSize()&#13;&#10;                .padding(paddingValues)&#13;&#10;                .padding(24.dp),&#13;&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#13;&#10;            verticalArrangement = Arrangement.Center&#13;&#10;        ) {&#13;&#10;            Text(&#13;&#10;                text = &quot;欢迎来到 Booth&quot;,&#13;&#10;                style = MaterialTheme.typography.headlineMedium&#13;&#10;            )&#13;&#10;&#13;&#10;            Spacer(modifier = Modifier.height(32.dp))&#13;&#10;&#13;&#10;            OutlinedTextField(&#13;&#10;                value = phone,&#13;&#10;                onValueChange = { phone = it },&#13;&#10;                label = { Text(&quot;手机号&quot;) },&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Phone),&#13;&#10;                singleLine = true&#13;&#10;            )&#13;&#10;&#13;&#10;            Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;            OutlinedTextField(&#13;&#10;                value = password,&#13;&#10;                onValueChange = { password = it },&#13;&#10;                label = { Text(&quot;密码&quot;) },&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                visualTransformation = PasswordVisualTransformation(),&#13;&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),&#13;&#10;                singleLine = true&#13;&#10;            )&#13;&#10;&#13;&#10;            Spacer(modifier = Modifier.height(24.dp))&#13;&#10;&#13;&#10;            Button(&#13;&#10;                onClick = {&#13;&#10;                    if (phone.isNotBlank() &amp;&amp; password.isNotBlank()) {&#13;&#10;                        if (isRegisterMode) {&#13;&#10;                            viewModel.register(phone, password)&#13;&#10;                        } else {&#13;&#10;                            viewModel.login(phone, password)&#13;&#10;                        }&#13;&#10;                    } else {&#13;&#10;                        scope.launch {&#13;&#10;                            snackbarHostState.showSnackbar(&quot;请填写完整信息&quot;)&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                },&#13;&#10;                modifier = Modifier.fillMaxWidth(),&#13;&#10;                enabled = loginState !is LoginState.Loading&#13;&#10;            ) {&#13;&#10;                if (loginState is LoginState.Loading) {&#13;&#10;                    CircularProgressIndicator(&#13;&#10;                        modifier = Modifier.size(24.dp),&#13;&#10;                        color = MaterialTheme.colorScheme.onPrimary&#13;&#10;                    )&#13;&#10;                } else {&#13;&#10;                    Text(if (isRegisterMode) &quot;注册&quot; else &quot;登录&quot;)&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            Spacer(modifier = Modifier.height(16.dp))&#13;&#10;&#13;&#10;            TextButton(onClick = { isRegisterMode = !isRegisterMode }) {&#13;&#10;                Text(if (isRegisterMode) &quot;已有账号？去登录&quot; else &quot;还没有账号？去注册&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/tamakara/booth/ui/screens/ProfileScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/tamakara/booth/ui/screens/ProfileScreen.kt" />
              <option name="originalContent" value="package com.tamakara.booth.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.tamakara.booth.data.local.PreferencesManager&#10;import com.tamakara.booth.ui.navigation.Screen&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(navController: NavController) {&#10;    val context = LocalContext.current&#10;    val prefsManager = remember { PreferencesManager(context) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    var userId by remember { mutableStateOf(-1L) }&#10;    var phone by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(Unit) {&#10;        userId = prefsManager.userId.first()&#10;        phone = prefsManager.phone.first()&#10;    }&#10;&#10;    val isLoggedIn = userId &gt; 0&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;我的&quot;) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimary&#10;                )&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Person,&#10;                        contentDescription = &quot;头像&quot;,&#10;                        modifier = Modifier.size(64.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                    Column {&#10;                        Text(&#10;                            text = if (isLoggedIn) phone.ifEmpty { &quot;用户$userId&quot; } else &quot;未登录&quot;,&#10;                            style = MaterialTheme.typography.titleLarge&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Text(&#10;                            text = &quot;余额: ¥0.00&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            if (!isLoggedIn) {&#10;                Button(&#10;                    onClick = { navController.navigate(Screen.Login.route) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;登录/注册&quot;)&#10;                }&#10;            } else {&#10;                OutlinedButton(&#10;                    onClick = {&#10;                        scope.launch {&#10;                            prefsManager.clear()&#10;                            userId = -1L&#10;                            phone = &quot;&quot;&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Icon(Icons.AutoMirrored.Filled.ExitToApp, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;退出登录&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.tamakara.booth.ui.screens&#10;&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ExitToApp&#10;import androidx.compose.material.icons.filled.Person&#10;import androidx.compose.material3.Button&#10;import androidx.compose.material3.ButtonDefaults&#10;import androidx.compose.material3.Card&#10;import androidx.compose.material3.CardDefaults&#10;import androidx.compose.material3.ExperimentalMaterial3Api&#10;import androidx.compose.material3.Icon&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.OutlinedButton&#10;import androidx.compose.material3.Scaffold&#10;import androidx.compose.material3.SnackbarHost&#10;import androidx.compose.material3.SnackbarHostState&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.TopAppBar&#10;import androidx.compose.material3.TopAppBarDefaults&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberCoroutineScope&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.navigation.NavController&#10;import com.tamakara.booth.data.local.PreferencesManager&#10;import com.tamakara.booth.ui.navigation.Screen&#10;import kotlinx.coroutines.flow.first&#10;import kotlinx.coroutines.launch&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun ProfileScreen(navController: NavController) {&#10;    val context = LocalContext.current&#10;    val prefsManager = remember { PreferencesManager(context) }&#10;    val scope = rememberCoroutineScope()&#10;&#10;    var userId by remember { mutableStateOf(-1L) }&#10;    var phone by remember { mutableStateOf(&quot;&quot;) }&#10;    val snackbarHostState = remember { SnackbarHostState() }&#10;&#10;    LaunchedEffect(Unit) {&#10;        userId = prefsManager.userId.first()&#10;        phone = prefsManager.phone.first()&#10;    }&#10;&#10;    // 接收从 LoginScreen 返回的结果：立即显示提示&#10;    LaunchedEffect(navController.currentBackStackEntry) {&#10;        val handle = navController.currentBackStackEntry?.savedStateHandle&#10;        val loginResult = handle?.get&lt;Boolean&gt;(&quot;login_result&quot;) ?: false&#10;        if (loginResult) {&#10;            val message = handle.get&lt;String&gt;(&quot;login_message&quot;) ?: &quot;登录成功&quot;&#10;            snackbarHostState.showSnackbar(message)&#10;            handle.remove&lt;Boolean&gt;(&quot;login_result&quot;)&#10;            handle.remove&lt;String&gt;(&quot;login_message&quot;)&#10;            // 更新本地展示数据（可选：重新拉取）&#10;            userId = prefsManager.userId.first()&#10;            phone = prefsManager.phone.first()&#10;        }&#10;    }&#10;&#10;    val isLoggedIn = userId &gt; 0&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;我的&quot;) },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = MaterialTheme.colorScheme.primary,&#10;                    titleContentColor = MaterialTheme.colorScheme.onPrimary&#10;                )&#10;            )&#10;        },&#10;        snackbarHost = { SnackbarHost(snackbarHostState) }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(16.dp)&#10;        ) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(16.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Person,&#10;                        contentDescription = &quot;头像&quot;,&#10;                        modifier = Modifier.size(64.dp)&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;&#10;                    Column {&#10;                        Text(&#10;                            text = if (isLoggedIn) phone.ifEmpty { &quot;用户$userId&quot; } else &quot;未登录&quot;,&#10;                            style = MaterialTheme.typography.titleLarge&#10;                        )&#10;                        Spacer(modifier = Modifier.height(4.dp))&#10;                        Text(&#10;                            text = &quot;余额: ¥0.00&quot;,&#10;                            style = MaterialTheme.typography.bodyMedium&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            if (!isLoggedIn) {&#10;                Button(&#10;                    onClick = { navController.navigate(Screen.Login.route) },&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Text(&quot;登录/注册&quot;)&#10;                }&#10;            } else {&#10;                OutlinedButton(&#10;                    onClick = {&#10;                        scope.launch {&#10;                            prefsManager.clear()&#10;                            userId = -1L&#10;                            phone = &quot;&quot;&#10;                        }&#10;                    },&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = MaterialTheme.colorScheme.error&#10;                    )&#10;                ) {&#10;                    Icon(Icons.AutoMirrored.Filled.ExitToApp, contentDescription = null)&#10;                    Spacer(modifier = Modifier.width(8.dp))&#10;                    Text(&quot;退出登录&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>